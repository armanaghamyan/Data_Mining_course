library(dplyr)
library(Metrics)
library(ggplot2)
library(caret)
library(AER)
data("spam7")
spam<-spam7
str(spam)
spam$yesno<-ifelse(spam$yesno=='n',0,1)
spam$yesno<-as.factor(spam$yesno)
set.seed(1)
options(scipen=999)
train_index<-createDataPartition(spam$yesno,p = 0.8,list = F)
Train<-spam[train_index,]
Test<-spam[-train_index,]
dim(Test)
dim(Train)
logit<-glm(yesno~.-make,data=spam7,family = binomial)
summary(logit)
pred<-predict(logit,Test)
pr_class<-ifelse(pred>0.5,1,0)
conf_mat<-addmargins(table(Test$yesno,pr_class))
conf_mat
confusionMatrix(as.factor(pr_class),Test$yesno,positive = "1")
library(pROC)
Roc<-roc(Test$yesno,pr_class)
plt1<-ggroc(Roc,alpha = 0.5, colour = "red", linetype = 1, size = 1)+ggtitle("ROC curve of the Model")
plt1
library(FNN)
library(caret)
grid<-expand.grid(k=1:25)
set.seed(1)
knn_model_1<-train(yesno~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
plot(knn_model_1)
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
lm_model<-lm(crl.tot~.,data=Train)
summary(lm_model)
LM_pred<-predict(lm_model,Test)
RMSE<-rmse(LM_pred,Test$crl.tot)
RMSE
#knn
library(caret)
library(FNN)
y=Train[1]
y_1=Test[1]
str(Train[7])
Train$yesno=as.numeric(Train$yesno)
Test$yesno=as.numeric(Test$yesno)
library(caret)
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
library(DAAG)
library(dplyr)
library(Metrics)
library(ggplot2)
library(caret)
library(AER)
data("spam7")
spam<-spam7
str(spam)
spam$yesno<-ifelse(spam$yesno=='n',0,1)
spam$yesno<-as.factor(spam$yesno)
set.seed(1)
options(scipen=999)
train_index<-createDataPartition(spam$yesno,p = 0.8,list = F)
Train<-spam[train_index,]
Test<-spam[-train_index,]
dim(Test)
dim(Train)
logit<-glm(yesno~.-make,data=spam7,family = binomial)
summary(logit)
pred<-predict(logit,Test)
pr_class<-ifelse(pred>0.5,1,0)
conf_mat<-addmargins(table(Test$yesno,pr_class))
conf_mat
confusionMatrix(as.factor(pr_class),Test$yesno,positive = "1")
library(pROC)
Roc<-roc(Test$yesno,pr_class)
plt1<-ggroc(Roc,alpha = 0.5, colour = "red", linetype = 1, size = 1)+ggtitle("ROC curve of the Model")
plt1
library(FNN)
library(caret)
grid<-expand.grid(k=1:25)
set.seed(1)
knn_model_1<-train(yesno~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
plot(knn_model_1)
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
lm_model<-lm(crl.tot~.,data=Train)
summary(lm_model)
LM_pred<-predict(lm_model,Test)
RMSE<-rmse(LM_pred,Test$crl.tot)
RMSE
#knn
library(caret)
library(FNN)
y=Train[1]
y_1=Test[1]
str(Train[7])
Train$yesno=as.numeric(Train$yesno)
Test$yesno=as.numeric(Test$yesno)
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
logit<-glm(yesno~.-make,data=Train,family = binomial)
library(DAAG)
library(dplyr)
library(Metrics)
library(ggplot2)
library(caret)
library(AER)
data("spam7")
spam<-spam7
str(spam)
spam$yesno<-ifelse(spam$yesno=='n',0,1)
spam$yesno<-as.factor(spam$yesno)
set.seed(1)
options(scipen=999)
train_index<-createDataPartition(spam$yesno,p = 0.8,list = F)
Train<-spam[train_index,]
Test<-spam[-train_index,]
dim(Test)
dim(Train)
logit<-glm(yesno~.-make,data=Train,family = binomial)
summary(logit)
pred<-predict(logit,Test)
pr_class<-ifelse(pred>0.5,1,0)
conf_mat<-addmargins(table(Test$yesno,pr_class))
conf_mat
confusionMatrix(as.factor(pr_class),Test$yesno,positive = "1")
library(pROC)
Roc<-roc(Test$yesno,pr_class)
plt1<-ggroc(Roc,alpha = 0.5, colour = "red", linetype = 1, size = 1)+ggtitle("ROC curve of the Model")
plt1
conf_mat
library(FNN)
library(caret)
grid<-expand.grid(k=1:25)
set.seed(1)
knn_model_1<-train(yesno~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
plot(knn_model_1)
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
knn_model_1<-train(yesno~.,data=spam,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
plot(knn_model_1)
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
knn_model_1<-train(yesno~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
knn_model_1<-train(yesno~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
plot(knn_model_1)
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
lm_model<-lm(crl.tot~.,data=Train)
summary(lm_model)
LM_pred<-predict(lm_model,Test)
RMSE<-rmse(LM_pred,Test$crl.tot)
RMSE
#knn
library(caret)
library(FNN)
y=Train[1]
y_1=Test[1]
str(Train[7])
Train$yesno=as.numeric(Train$yesno)
Test$yesno=as.numeric(Test$yesno)
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=spam,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111<-train(crl.tot~.,data=spam,method="knn",
trControl=trainControl("cv",number=3),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=3),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
trControl
model_111
model_111<-train(crl.tot~.,data=spam,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111<-train(crl.tot~.,data=spam,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
confusionMatrix(as.factor(pr_class),Test$yesno,positive = "1")
library(DAAG)
library(dplyr)
library(Metrics)
library(ggplot2)
library(caret)
library(AER)
data("spam7")
spam<-spam7
str(spam)
spam$yesno<-ifelse(spam$yesno=='n',0,1)
spam$yesno<-as.factor(spam$yesno)
set.seed(1)
options(scipen=999)
train_index<-createDataPartition(spam$yesno,p = 0.8,list = F)
Train<-spam[train_index,]
Test<-spam[-train_index,]
dim(Test)
dim(Train)
logit<-glm(yesno~.-make,data=Train,family = binomial)
summary(logit)
pred<-predict(logit,Test)
pr_class<-ifelse(pred>0.5,1,0)
conf_mat<-addmargins(table(Test$yesno,pr_class))
conf_mat
confusionMatrix(as.factor(pr_class),Test$yesno,positive = "1")
library(pROC)
Roc<-roc(Test$yesno,pr_class)
plt1<-ggroc(Roc,alpha = 0.5, colour = "red", linetype = 1, size = 1)+ggtitle("ROC curve of the Model")
plt1
library(ROCR)
P_test<-prediciton(pred,Test$yesno)
library(ROCR)
P_test<-prediciton(pred,Test$yesno)
P_test<-ROCR::prediciton(pred,Test$yesno)
install.packages("ROCR")
install.packages("ROCR")
library(ROCR)
P_test<-ROCR::prediciton(pred,Test$yesno)
P_test<-prediciton(pred,Test$yesno)
P_test<-prediction(pred,Test$yesno)
perf<-performance(P_test,'tpr','fpr')
plot(perf,colorize=T)
plt1
performance(P_test,'auc')@y.values
FPR<-unlist(perf@x.values)
TPR<-unlist(perf@y.values)
alpha=unlist(perf@alpha.values)
df<-data.frame(FPR,TPR,alpha)
head(df)
ggplot(df,aes(x=FPR,y=TPR,color=alpha)) + geom_line()+
theme_bw()+ labs(x="False Positive Rate",y="True Positive Rate",title="Roc Curve",color="Cutoff Values")
library(ggplot2)
ggplot(df,aes(x=FPR,y=TPR,color=alpha)) + geom_line()+
theme_bw()+ labs(x="False Positive Rate",y="True Positive Rate",title="Roc Curve",color="Cutoff Values")
set.seed(42)
library(Metrics)
data("spam7")
index<-sample(nrow(spam7),nrow(spam7)*.8,replace = F)
train<-spam7[index,]
test<-spam7[-index,]
OLS<-lm(crl.tot~.,data = train)
summary(OLS)# Rsquared 0.08774
OLS_PRED<-predict(OLS,test)
RMSE(pred =OLS_PRED,obs = test$crl.tot)#744.7224
RMSE(pred=OLS_PRED,obs = test$crl.tot)#744.7224
rmse(pred=OLS_PRED,obs = test$crl.tot)#744.7224
model_111_test<-knn.reg(Train[,-1],Test[,-1],Train$crl.tot,k=21)
library(DAAG)
library(dplyr)
library(Metrics)
library(ggplot2)
library(caret)
library(AER)
data("spam7")
spam<-spam7
str(spam)
spam$yesno<-ifelse(spam$yesno=='n',0,1)
spam$yesno<-as.factor(spam$yesno)
set.seed(1)
options(scipen=999)
train_index<-createDataPartition(spam$yesno,p = 0.8,list = F)
Train<-spam[train_index,]
Test<-spam[-train_index,]
dim(Test)
dim(Train)
logit<-glm(yesno~.-make,data=Train,family = binomial)
summary(logit)
pred<-predict(logit,Test)
pr_class<-ifelse(pred>0.5,1,0)
conf_mat<-addmargins(table(Test$yesno,pr_class))
conf_mat
confusionMatrix(as.factor(pr_class),Test$yesno,positive = "1")
#library(pROC)
#Roc<-roc(Test$yesno,pr_class)
#plt1<-ggroc(Roc,alpha = 0.5, colour = "red", linetype = 1, size = 1)+ggtitle("ROC curve of the Model")
#plt1
library(ggplot2)
library(ROCR)
P_test<-prediction(pred,Test$yesno)
perf<-performance(P_test,'tpr','fpr')
plot(perf,colorize=T)
performance(P_test,'auc')@y.values
FPR<-unlist(perf@x.values)
TPR<-unlist(perf@y.values)
alpha=unlist(perf@alpha.values)
df<-data.frame(FPR,TPR,alpha)
ggplot(df,aes(x=FPR,y=TPR,color=alpha)) + geom_line()+
theme_bw()+ labs(x="False Positive Rate",y="True Positive Rate",title="Roc Curve",color="Cutoff Values")
library(FNN)
library(caret)
grid<-expand.grid(k=1:25)
set.seed(1)
knn_model_1<-train(yesno~.,data=Train,method="knn",
trControl=trainControl("cv",number=5),
preProcess=c("center","scale"),
tuneGrid=grid)
plot(knn_model_1)
#so we get k=5
knn_model<-FNN::knn(Train[,-7],Test[,-7],cl=Train$yesno,k=5)
confusionMatrix(knn_model,Test$yesno,positive = '1')
lm_model<-lm(crl.tot~.,data=Train)
summary(lm_model)
LM_pred<-predict(lm_model,Test)
RMSE<-rmse(LM_pred,Test$crl.tot)
RMSE
#knn
library(caret)
library(FNN)
y=Train[1]
y_1=Test[1]
str(Train[7])
Train$yesno=as.numeric(Train$yesno)
Test$yesno=as.numeric(Test$yesno)
grid<-expand.grid(k=1:25)
set.seed(1)
model_111<-train(crl.tot~.,data=Train,method="knn",
trControl=trainControl("cv",number=4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model_111_test<-knn.reg(Train[,-1],Test[,-1],Train$crl.tot,k=21)
model_111$results[which.min(model_111$results$RMSE),]
model_111$results[which.max(model_111$results$Rsquared),]
model_111_test$results[which.min(model_111$results$RMSE),]
model_111_test$results[which.max(model_111$results$Rsquared),]
set.seed(42)
library(Metrics)
data("spam7")
index<-sample(nrow(spam7),nrow(spam7)*.8,replace = F)
train<-spam7[index,]
test<-spam7[-index,]
OLS<-lm(crl.tot~.,data = train)
summary(OLS)# Rsquared 0.08774
OLS_PRED<-predict(OLS,test)
rmse(actual = test$crl.tot,predicted = OLS_PRED)#744.7224
##KNN
grid<-expand.grid(k=5:10)
set.seed(1)
model<-train(
crl.tot~.,data=train,method='knn',
trControl=trainControl("cv",number = 4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model<-train(
crl.tot~.,data=train,method='knn',
trControl=trainControl("cv",number = 4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model
l
model
model<-train(
crl.tot~.,data=train,method='knn',
trControl=trainControl("cv",number = 4),
preProcess=c("center","scale"),
tuneGrid=grid
)
model
set.seed(42)
library(Metrics)
data("spam7")
index<-sample(nrow(spam7),nrow(spam7)*.8,replace = F)
train<-spam7[index,]
test<-spam7[-index,]
OLS<-lm(crl.tot~.,data = train)
summary(OLS)# Rsquared 0.08774
OLS_PRED<-predict(OLS,test)
rmse(actual = test$crl.tot,predicted = OLS_PRED)#744.7224
##KNN
grid<-expand.grid(k=5:10)
set.seed(1)
model<-train(
crl.tot~.,data=train,method='knn',
trControl=trainControl("cv",number = 4),
preProcess=c("center","scale"),
tuneGrid=grid
)
set.seed(42)
library(Metrics)
data("spam7")
index<-sample(nrow(spam7),nrow(spam7)*.8,replace = F)
train<-spam7[index,]
test<-spam7[-index,]
OLS<-lm(crl.tot~.,data = train)
summary(OLS)# Rsquared 0.08774
OLS_PRED<-predict(OLS,test)
rmse(actual = test$crl.tot,predicted = OLS_PRED)#744.7224
##KNN
grid<-expand.grid(k=5:10)
set.seed(1)
model<-train(
crl.tot~.,data=train,method='knn',
trControl=trainControl("cv",number = 4),
preProcess=c("center","scale"),
tuneGrid=grid
)
summary(lm_model)
